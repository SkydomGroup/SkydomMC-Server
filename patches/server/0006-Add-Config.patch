From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chosen <haizhongdelan@outlook.com>
Date: Sat, 15 Apr 2023 17:28:18 +0800
Subject: [PATCH] Add Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index c07eb451a576811a39021f6f97103c77488fd001..395a958006c5646e10ed9a5fa11c4727e8d1ddb2 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -242,7 +242,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Skydom - add config to timings report
+            pair("skydom", mapAsJSON(Bukkit.spigot().getSkydomConfig(), null)) // Skydom - add config to timings report
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a7e133f3495e9132a5fdae2c24f225e7b026295a..d99112b9a974de2507d426d97e352f5da013cb2a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -222,6 +222,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        org.skydom.chosen.server.SkydomConfig.init((java.io.File) options.valueOf("skydom-settings")); // Skydom - Server Config
+        org.skydom.chosen.server.SkydomConfig.registerCommands(); // Skydom - Server Command
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f502934c3ab34351f61d057ef7927310b63c680b..fc1e205070aa1908a95a22d2628428d5d9986f36 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -164,6 +164,7 @@ import net.minecraft.world.level.storage.loot.LootTables;
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import org.skydom.chosen.server.SkydomConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -1121,6 +1122,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
             // Paper end
 
+            org.skydom.chosen.server.SkydomConfig.createWorldSections = false; // Skydom - dont let plugin create worlds fill our config
             org.spigotmc.WatchdogThread.tick(); // Paper
             org.spigotmc.WatchdogThread.hasStarted = true; // Paper
             Arrays.fill( recentTps, 20 );
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 973ecd50f9cb6b86c353586e84d15dcb118ccb60..717ffaeb0aa44529b16b3213cf642c051c7a1bb0 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -102,6 +102,7 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.world.GenericGameEvent;
+import org.skydom.chosen.server.SkydomConfig;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -177,6 +178,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     // Paper end
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
+    public final SkydomConfig.WorldConfig skydomConfig; // Skydom - World Config
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -277,6 +279,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
+        this.skydomConfig = new org.skydom.chosen.server.SkydomConfig.WorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData)worlddatamutable).getLevelName()); // Skydom - World Config
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e9d588a50d9623cc2c058947f76e09f7bd9f489b..7a7c6d6a964ce82b93f5c224cd15b805f0cbb80d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -956,6 +956,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        org.skydom.chosen.server.SkydomConfig.init((File) console.options.valueOf("skydommc-server-settings")); // Skydom - Server Config
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -963,7 +964,7 @@ public final class CraftServer implements Server {
             for (SpawnCategory spawnCategory : SpawnCategory.values()) {
                 if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
                     long ticksPerCategorySpawn = this.getTicksPerSpawns(spawnCategory);
-                    if (ticksPerCategorySpawn < 0) {
+                    if (ticksPerCategorySpawn < 0) {io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
                         world.ticksPerSpawnCategory.put(spawnCategory, CraftSpawnCategory.getDefaultTicksPerSpawn(spawnCategory));
                     } else {
                         world.ticksPerSpawnCategory.put(spawnCategory, ticksPerCategorySpawn);
@@ -971,6 +972,7 @@ public final class CraftServer implements Server {
                 }
             }
             world.spigotConfig.init(); // Spigot
+            world.skydomConfig.init(); // Skydom
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -986,6 +988,7 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
+        org.skydom.chosen.server.SkydomConfig.registerCommands(); // Skydom - Server Command
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2744,6 +2747,14 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        // Skydom start - add config to timings report
+        @Override
+        public YamlConfiguration getSkydomConfig()
+        {
+            return org.skydom.chosen.server.SkydomConfig.config;
+        }
+        /// Skydom end - add config to timings report
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 755c223ab2a046285eb9916b6195093714f4c5ba..ad3ca8c2ca15d6f0f78000aeb2ab1684e9f8ca45 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -126,6 +126,14 @@ public class Main {
                         .defaultsTo(new File("bukkit.yml"))
                         .describedAs("Yml file");
 
+                // Skydom start - Server Config
+                acceptsAll(asList("skydommc-server", "skydommc-server-settings"), "File for skydommc-server settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                     .defaultsTo(new File("skydommc-server.yml"))
+                    .describedAs("Yml file");
+                // Skydom end - Server Config
+
                 acceptsAll(Main.asList("C", "commands-settings"), "File for command settings")
                         .withRequiredArg()
                         .ofType(File.class)
diff --git a/src/main/java/org/skydom/chosen/server/SkydomConfig.java b/src/main/java/org/skydom/chosen/server/SkydomConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..70232eb2b78460b0aca3d97e7c9484e0ee89bdb8
--- /dev/null
+++ b/src/main/java/org/skydom/chosen/server/SkydomConfig.java
@@ -0,0 +1,308 @@
+package org.skydom.chosen.server;
+    
+import com.destroystokyo.paper.util.SneakyThrow;
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+import java.io.File;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+    // Powered by Tuinity(https://github.com/Tuinity/Tuinity)
+    
+    public final class SkydomConfig {
+
+        public static final String CONFIG_HEADER = "Configuration file for SkydomMC-Server.";
+    public static final int CURRENT_CONFIG_VERSION = 2;
+
+        private static final Object[] EMPTY = new Object[0];
+
+        private static File configFile;
+    public static YamlConfiguration config;
+    private static int configVersion;
+    public static boolean createWorldSections = true;
+    static Map<String, Command> commands;
+
+        public static void init(final File file) {
+                SkydomConfig.configFile = file;
+                config = new YamlConfiguration();
+                config.options().header(CONFIG_HEADER);
+                config.options().copyDefaults(true);
+        
+                    if (!file.exists()) {
+                        try {
+                                file.createNewFile();
+                            } catch (final Exception ex) {
+                                Bukkit.getLogger().log(Level.SEVERE, "Failure to create SkydomMC-Server config", ex);
+                            }
+                    } else {
+                        try {
+                                config.load(file);
+                            } catch (final Exception ex) {
+                                Bukkit.getLogger().log(Level.SEVERE, "Failure to load SkydomMC-Server config", ex);
+                                SneakyThrow.sneaky(ex); /* Rethrow, this is critical */
+                                throw new RuntimeException(ex); // unreachable
+                            }
+                    }
+        
+                    if (config.contains("config-version-please-do-not-modify-me")) {
+                        SkydomConfig.set("config-version-please-do-not-modify-me", null);
+                    }
+                SkydomConfig.configVersion = SkydomConfig.getInt("config-version", CURRENT_CONFIG_VERSION);
+                SkydomConfig.set("config-version", CURRENT_CONFIG_VERSION);
+        
+                    updateConfigVersion(config);
+        
+                    SkydomConfig.load(config);
+        
+            	    commands = new HashMap<>();
+            }
+
+        public static void load(final YamlConfiguration config) {
+                for (Method method : SkydomConfig.class.getDeclaredMethods()) {
+                        if (Modifier.isPrivate(method.getModifiers())) {
+                                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                                        try {
+                                                method.setAccessible(true);
+                                                method.invoke(null);
+                                            } catch (InvocationTargetException ex) {
+                                                throw Throwables.propagate(ex.getCause());
+                                            } catch (Exception ex) {
+                                                Bukkit.getLogger().log(Level.SEVERE, "Error invoking " +  method, ex);
+                                            }
+                                    }
+                            }
+                    }
+        
+                    /* We re-save to add new options */
+                        try {
+                        config.save(SkydomConfig.configFile);
+                    } catch (final Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Unable to save SkydomMC-Server config", ex);
+                    }
+            }
+
+        private static void updateConfigVersion(final YamlConfiguration config) {
+                if (configVersion < CURRENT_CONFIG_VERSION) {
+            
+                        }
+            }
+
+        static void set(final String path, final Object value) {
+                SkydomConfig.config.set(path, value);
+            }
+
+        public static void registerCommands() {
+                for (Map.Entry<String, Command> entry : commands.entrySet()) {
+                        MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Skydom", entry.getValue());
+                    }
+            }
+
+        static boolean getBoolean(final String path, final boolean dfl) {
+                SkydomConfig.config.addDefault(path, Boolean.valueOf(dfl));
+                return SkydomConfig.config.getBoolean(path, dfl);
+            }
+
+        static int getInt(final String path, final int dfl) {
+                SkydomConfig.config.addDefault(path, Integer.valueOf(dfl));
+                return SkydomConfig.config.getInt(path, dfl);
+            }
+
+        static long getLong(final String path, final long dfl) {
+                SkydomConfig.config.addDefault(path, Long.valueOf(dfl));
+                return SkydomConfig.config.getLong(path, dfl);
+            }
+
+        static double getDouble(final String path, final double dfl) {
+                SkydomConfig.config.addDefault(path, Double.valueOf(dfl));
+                return SkydomConfig.config.getDouble(path, dfl);
+            }
+
+        static String getString(final String path, final String dfl) {
+                SkydomConfig.config.addDefault(path, dfl);
+                return SkydomConfig.config.getString(path, dfl);
+            }
+
+        public static final class WorldConfig {
+
+            public final String worldName;
+        public String configPath;
+        ConfigurationSection worldDefaults;
+
+            public WorldConfig(final String worldName) {
+                        this.worldName = worldName;
+                        this.init();
+                    }
+
+            public void init() {
+                        this.worldDefaults = SkydomConfig.config.getConfigurationSection("world-settings.default");
+                        if (this.worldDefaults == null) {
+                                this.worldDefaults = SkydomConfig.config.createSection("world-settings.default");
+                            }
+            
+                            String worldSectionPath = SkydomConfig.configVersion < CURRENT_CONFIG_VERSION ? this.worldName : "world-settings.".concat(this.worldName);
+                        ConfigurationSection section = SkydomConfig.config.getConfigurationSection(worldSectionPath);
+                        this.configPath = worldSectionPath;
+                        if (SkydomConfig.createWorldSections) {
+                                if (section == null) {
+                                        section = SkydomConfig.config.createSection(worldSectionPath);
+                                    }
+                                SkydomConfig.config.set(worldSectionPath, section);
+                            }
+            
+                            this.load();
+                    }
+
+            public void load() {
+                        for (final Method method : SkydomConfig.WorldConfig.class.getDeclaredMethods()) {
+                                if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                                        !Modifier.isPrivate(method.getModifiers()) || Modifier.isStatic(method.getModifiers())) {
+                                        continue;
+                                    }
+                
+                                    try {
+                                        method.setAccessible(true);
+                                        method.invoke(this, EMPTY);
+                                    } catch (final Exception ex) {
+                                        SneakyThrow.sneaky(ex); /* Rethrow, this is critical */
+                                        throw new RuntimeException(ex); // unreachable
+                                    }
+                            }
+            
+                            if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                ConfigurationSection oldSection = SkydomConfig.config.getConfigurationSection(this.worldName);
+                                SkydomConfig.config.set("world-settings.".concat(this.worldName), oldSection);
+                                SkydomConfig.config.set(this.worldName, null);
+                            }
+            
+                            /* We re-save to add new options */
+                                try {
+                                SkydomConfig.config.save(SkydomConfig.configFile);
+                            } catch (final Exception ex) {
+                                Bukkit.getLogger().log(Level.SEVERE, "Unable to save SkydomMC-Server config", ex);
+                            }
+                    }
+
+            void set(final String path, final Object val) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.set(path, val);
+                        if (config != null && config.get(path) != null) {
+                                config.set(path, val);
+                            }
+                    }
+
+            boolean getBoolean(final String path, final boolean dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, Boolean.valueOf(dfl));
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getBoolean(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getBoolean(path) : config.getBoolean(path, this.worldDefaults.getBoolean(path));
+                    }
+
+            boolean getBooleanRaw(final String path, final boolean dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getBoolean(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getBoolean(path, dfl) : config.getBoolean(path, this.worldDefaults.getBoolean(path, dfl));
+                    }
+
+            int getInt(final String path, final int dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, Integer.valueOf(dfl));
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getInt(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getInt(path) : config.getInt(path, this.worldDefaults.getInt(path));
+                    }
+
+            int getIntRaw(final String path, final int dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getInt(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getInt(path, dfl) : config.getInt(path, this.worldDefaults.getInt(path, dfl));
+                    }
+
+            long getLong(final String path, final long dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, Long.valueOf(dfl));
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getLong(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getLong(path) : config.getLong(path, this.worldDefaults.getLong(path));
+                    }
+
+            long getLongRaw(final String path, final long dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getLong(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getLong(path, dfl) : config.getLong(path, this.worldDefaults.getLong(path, dfl));
+                    }
+
+            double getDouble(final String path, final double dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, Double.valueOf(dfl));
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getDouble(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getDouble(path) : config.getDouble(path, this.worldDefaults.getDouble(path));
+                    }
+
+            double getDoubleRaw(final String path, final double dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        if (SkydomConfig.configVersion < CURRENT_CONFIG_VERSION) {
+                                if (config != null && config.getDouble(path) == dfl) {
+                                        config.set(path, null);
+                                    }
+                            }
+                        return config == null ? this.worldDefaults.getDouble(path, dfl) : config.getDouble(path, this.worldDefaults.getDouble(path, dfl));
+                    }
+
+            String getString(final String path, final String dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, dfl);
+                        return config == null ? this.worldDefaults.getString(path) : config.getString(path, this.worldDefaults.getString(path));
+                    }
+
+            String getStringRaw(final String path, final String dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        return config == null ? this.worldDefaults.getString(path, dfl) : config.getString(path, this.worldDefaults.getString(path, dfl));
+                    }
+
+            List getList(final String path, final List dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        this.worldDefaults.addDefault(path, dfl);
+                        return config == null ? this.worldDefaults.getList(path) : config.getList(path, this.worldDefaults.getList(path));
+                    }
+
+            List getListRaw(final String path, final List dfl) {
+                        final ConfigurationSection config = SkydomConfig.config.getConfigurationSection(this.configPath);
+                        return config == null ? this.worldDefaults.getList(path, dfl) : config.getList(path, this.worldDefaults.getList(path, dfl));
+                    }
+    }
+}
diff --git a/src/main/java/org/skydom/chosen/server/command/CommandArgument.java b/src/main/java/org/skydom/chosen/server/command/CommandArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..663bb5359464536d8e4ad5e3708907e0a3ccc895
--- /dev/null
+++ b/src/main/java/org/skydom/chosen/server/command/CommandArgument.java
@@ -0,0 +1,43 @@
+package org.skydom.chosen.server.command;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class CommandArgument {
+
+    private final List<CommandArgumentType<?>> argumentTypes;
+    private final List<List<String>> tabComplete;
+
+    public CommandArgument(CommandArgumentType<?>... argumentTypes) {
+        this.argumentTypes = List.of(argumentTypes);
+        this.tabComplete = new ArrayList<>();
+        for (int i = 0; i < argumentTypes.length; i++) {
+            tabComplete.add(new ArrayList<>());
+        }
+    }
+
+    public List<String> tabComplete(int n) {
+        if (tabComplete.size() > n) {
+            return tabComplete.get(n);
+        } else {
+            return List.of();
+        }
+    }
+
+    public CommandArgument setTabComplete(int index, List<String> list) {
+        tabComplete.set(index, list);
+        return this;
+    }
+
+    public CommandArgumentResult parse(int index, String @NotNull [] args) {
+        Object[] result = new Object[argumentTypes.size()];
+        Arrays.fill(result, null);
+        for (int i = index, j = 0; i < args.length && j < result.length; i++, j++) {
+            result[j] = argumentTypes.get(j).pasre(args[i]);
+        }
+        return new CommandArgumentResult(new ArrayList<>(Arrays.asList(result)));
+    }
+}
diff --git a/src/main/java/org/skydom/chosen/server/command/CommandArgumentResult.java b/src/main/java/org/skydom/chosen/server/command/CommandArgumentResult.java
new file mode 100644
index 0000000000000000000000000000000000000000..8190d67736eaea7876afb216244e2deb12dab34f
--- /dev/null
+++ b/src/main/java/org/skydom/chosen/server/command/CommandArgumentResult.java
@@ -0,0 +1,61 @@
+package org.skydom.chosen.server.command;
+
+import net.minecraft.core.BlockPos;
+import org.bukkit.util.Vector;
+import java.util.List;
+import java.util.Objects;
+
+public class CommandArgumentResult {
+
+    private final List<Object> result;
+
+    public CommandArgumentResult(List<Object> result) {
+        this.result = result;
+    }
+
+    public Integer readInt(int def) {
+        return Objects.requireNonNullElse(read(Integer.class), def);
+    }
+
+    public Double readDouble(double def) {
+        return Objects.requireNonNullElse(read(Double.class), def);
+    }
+
+    public String readString(String def) {
+        return Objects.requireNonNullElse(read(String.class), def);
+    }
+
+    public BlockPos readPos() {
+        Integer[] pos = {read(Integer.class), read(Integer.class), read(Integer.class)};
+        for (Integer po : pos) {
+            if (po == null) {
+                return null;
+            }
+        }
+        return new BlockPos(pos[0], pos[1], pos[2]);
+    }
+
+    public Vector readVector() {
+        Double[] pos = {read(Double.class), read(Double.class), read(Double.class)};
+        for (Double po : pos) {
+            if (po == null) {
+                return null;
+            }
+        }
+        return new Vector(pos[0], pos[1], pos[2]);
+    }
+
+    public <T> T read(Class<T> tClass) {
+        if (result.isEmpty()) {
+            return null;
+        }
+
+        Object obj = result.remove(0);
+        if (tClass.isInstance(obj)) {
+            return tClass.cast(obj);
+        } else {
+            return null;
+        }
+    }
+
+}
diff --git a/src/main/java/org/skydom/chosen/server/command/CommandArgumentType.java b/src/main/java/org/skydom/chosen/server/command/CommandArgumentType.java
new file mode 100644
index 0000000000000000000000000000000000000000..da2d4089b7c117d1fdae1a21456926cf0c31ae3d
--- /dev/null
+++ b/src/main/java/org/skydom/chosen/server/command/CommandArgumentType.java
@@ -0,0 +1,37 @@
+package org.skydom.chosen.server.command;
+
+import org.jetbrains.annotations.NotNull;
+
+public abstract class CommandArgumentType<E> {
+
+    public static final CommandArgumentType<Integer> INTEGER = new CommandArgumentType<>() {
+        @Override
+        public Integer pasre(@NotNull String arg) {
+            try {
+                return Integer.parseInt(arg);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+    };
+
+    public static final CommandArgumentType<Double> DOUBLE = new CommandArgumentType<>() {
+        @Override
+        public Double pasre(@NotNull String arg) {
+            try {
+                return Double.parseDouble(arg);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+    };
+
+    public static final CommandArgumentType<String> STRING = new CommandArgumentType<>() {
+        @Override
+        public String pasre(@NotNull String arg) {
+            return arg;
+        }
+    };
+
+    public abstract E pasre(@NotNull String arg);
+}
